# Generated by Django 3.0.5 on 2021-11-30 19:42

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import instagrammini.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('HashTags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, null=True, size=None)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=900)),
                ('status', models.CharField(choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink'), ('Grey', 'Grey'), ('Peach', 'Peach'), ('Black', 'Black'), ('White', 'White')], default='White', max_length=900)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='useralbums', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=1200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimilarUserSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('similarty_score', models.PositiveIntegerField(default=0)),
                ('matching_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='usersimilars', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarusers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlbumSubs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=instagrammini.models.getImagePath)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('file_name', models.CharField(blank=True, max_length=1200, null=True)),
                ('file_size', models.CharField(blank=True, max_length=60, null=True)),
                ('caption', models.CharField(blank=True, max_length=1200, null=True)),
                ('background_color', models.CharField(choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink'), ('Grey', 'Grey'), ('Peach', 'Peach'), ('Black', 'Black'), ('White', 'White')], default='White', max_length=900)),
                ('font_color', models.CharField(choices=[('Red', 'Red'), ('Yellow', 'Yellow'), ('Pink', 'Pink'), ('Grey', 'Grey'), ('Peach', 'Peach'), ('Black', 'Black'), ('White', 'White')], default='Black', max_length=900)),
                ('positons', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), blank=True, null=True, size=None)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albumsubs', to='instagrammini.Album')),
            ],
        ),
        migrations.AddField(
            model_name='album',
            name='topics',
            field=models.ManyToManyField(related_name='usersubscribedtopics', to='instagrammini.Topic'),
        ),
    ]
